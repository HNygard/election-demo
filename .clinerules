# Online Election Demo

(kept in sync with README.md in the root directory)

This is a demonstration application that showcases potential vulnerabilities and security challenges in web-based voting systems. The purpose of this project is educational, aiming to highlight why online voting in democratic elections requires careful consideration.

## Purpose

This demo illustrates common security concerns and technical challenges that make online voting problematic for democratic elections. It serves as a practical example of why many cybersecurity experts are cautious about implementing internet voting for official elections.

This application is connected to my talk on election security. I don't think it makes sense all by itself without the associated "flair" on stage.

## ðŸš¨ Important Notice

This is a demonstration tool only. It should NOT be used for actual elections or voting purposes. The vulnerabilities shown are intentional for educational purposes.

## (TODO) Security Concerns Demonstrated

- Potential for vote manipulation
    - I will manipulate the published result.
- Issues with voter anonymity
    - I will show snippet of the logs with details like IP,
      browser, etc
- Exclusion of some groups
    - Example: Exclude based on network (Telenor mobil or other large carrier in Norway)
    - Example: Exclude based on brower (Ios devices get error)

Might be cut for time:
- Vote verification
    - Give a verification code at the end. Can supposablity
    use it to verify that your vote was part of the result.
    - Can you trust the verification?
    - Who can verify the veriication? A handful of people? Is that good for trust in the election?

- Voter authentication challenges

## Educational Value

This project helps:
- Election officials understand technical risks
- Developers learn about security challenges
- Students explore cybersecurity concepts
- Demonstrate why traditional voting methods remain important

## Technical Implementation

### Backend

The backend is built with Express.js and includes several intentionally transparent features that highlight security concerns:

- In-memory vote storage (votes can be lost on server restart)
- Voter tracking system that collects:
  - IP addresses
  - Browser information
  - Language preferences
  - Geographic location (via GeoIP)
  - Timestamps
- No authentication required for voting
- Public API endpoints for:
  - Submitting votes
  - Viewing election results
  - Accessing voter information
  - Resetting all data
- Rate limiting (5 requests per 15 minutes per IP)
- Simple verification codes with no cryptographic security

## Disclaimer

This application intentionally contains vulnerabilities for educational purposes. Do not use any code from this project in production systems or real election applications.


END OF COPY FROM README FILE


## Rules

I pledge to follow the custom instructions.

- The current working directory is project root.
- When making changes, avoid unnecessary modifications that would complicate code review (e.g. formatting, variable renaming, etc.)
- After completing work, commit changes with detailed messages explaining what and why. If the "why" is unclear, ask for clarification.
- If commit reason is unclear, ask for clarification
- When viewing git diffs, use git with "no-pager" parameter: git --no-pager diff
- Update relevant documentation in /docs when modifying features. Don't forget to update codebase documentation with changes.
- Keep README.md in sync with new capabilities
- Before and after any tool use, give me a confidence level (0-10) on how the tool use will help the project.

## Commands:

- Run tests using:
    (not defined)
    
- Run system using:
    docker compose up -d

- Rebuild application (need when packages are updated):
    docker compose up --build -d

- Restart application/service:
    docker compose down && docker compose up -d

- Logs:
    docker compose logs

- Check processes using:
    docker compose ps


## Security

### Sensitive Files

DO NOT read or modify:

-   .env files
-   \*_/config/secrets._
-   \*_/_.pem
-   Any file containing API keys, tokens, or credentials

### Security Practices

-   Never commit sensitive files
-   Use environment variables for secrets
-   Keep credentials out of logs and output

## API Documentation

The server runs on `http://localhost:3000` with:
- API endpoints at `http://localhost:3000/api/*`
- Static files served from `www-root/` directory at root URL
- Privacy policy served at `/privacy-policy`

All endpoints are available without authentication.

### Election Management
- GET `/api/elections`
  - Returns all available elections and their questions/options
- GET `/api/qr-code`
  - Returns QR code data URL for election website

### Voting
- POST `/api/vote/:electionId`
  - Submit a vote for a specific election
  - Body: `{ "answers": { "questionIndex": "selectedOption" } }`
  - Returns: `{ "success": true, "verificationCode": "string" }`

### Results & Data Access
- GET `/api/results/:electionId`
  - Returns vote counts for each option in the election
- GET `/api/voter-info`
  - Returns detailed information about all voters (IP, browser, location)
- GET `/api/privacy-views`
  - Returns data about privacy policy page views
- GET `/api/privacy-codes`
  - Returns all generated privacy policy acceptance codes
- GET `/api/simulation/status`
  - Returns current voting simulation status
  - Shows total votes and target vote count

### System Control
- POST `/api/reset`
  - Clears all votes and voter data
  - Restarts vote simulation
- POST `/api/privacy-code`
  - Generates a new privacy policy acceptance code
  - Body: `{ "name": "string" }`
  - Returns: `{ "success": true, "code": "string" }`

Note: All endpoints are intentionally unsecured to demonstrate vulnerabilities in online voting systems. Rate limiting is set to 5 requests per 15 minutes per IP.
